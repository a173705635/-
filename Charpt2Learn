chonggouyuanze  Don Roberts给了我一条准则：第一次做某件事时只管去做；第二次做类似的事会产生反感，但无
论如何还是可以去做；第三次再做类似的事，你就应该重构。
chonggoudzhogyaoxing
重构的最佳时机就在添加新功能之前。
ROM化让代码重构起来很费劲————搬出一份单独维护

我听过的一条建议是：将重构与添加新功能在版本控制的提交中分开。这样
做的一大好处是可以各自独立地审阅和批准这些提交。但我并不认同这种做法。
重构常常与新添功能紧密交织，不值得花工夫把它们分开。并且这样做也使重构
脱离了上下文，使人看不出这些“重构提交”的价值。每个团队应该尝试并找出适
合自己的工作方式，只是要记住：分离重构提交并不是毋庸置疑的原则，只有当
你真的感到有益时，才值得这样做

heshibuyinggai chonggou
听起来好像我一直在提倡重构，但确实有一些不值得重构的情况。
如果我看见一块凌乱的代码，但并不需要修改它，那么我就不需要重构它。
如果丑陋的代码能被隐藏在一个API之下，我就可以容忍它继续保持丑陋。只有
当我需要理解其工作原理时，对其进行重构才有价值。
另一种情况是，如果重写比重构还容易，就别重构了。这是个困难的决定。
如果不花一点儿时间尝试，往往很难真实了解重构一块代码的难度。决定到底应
该重构还是重写，需要良好的判断力与丰富的经验，我无法给出一条简单的建
议。

重构的唯一目的就是让我们开发更快，用更少的工作量创造更大的价
值。

关于性能，一件很有趣的事情是：如果你对大多数程序进行分析，就会发现
它把大半时间都耗费在一小半代码身上。如果你一视同仁地优化所有代码，90％
的优化工作都是白费劲的，因为被你优化的代码大多很少被执行。你花时间做优
化是为了让程序运行更快，但如果因为缺乏对程序的清楚认识而花费时间，那些
时间就都被浪费掉了

我发现重构可以帮助我写出更快的软件。短期看来，重构的确可能使软件变
慢，但它使优化阶段的软件性能调优更容易，最终还是会得到好的效果xine
软件重构-》性能优化
